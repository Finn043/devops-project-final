# CI/CD Pipeline for TechStore Ecommerce Application
# Group Melvin Final - SWE40006 DevOps Project
name: CI/CD Pipeline

# Trigger: Runs on every push to the main branch
on:
  push:
    branches: [ main ]

jobs:
  # ----------------------------------------------
  # JOB 1: Build & Test
  # Runs real Jest tests and builds Docker image
  # ----------------------------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Get the source code from repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment for our application
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Install dependencies and run real Jest tests
      - name: Install dependencies and test
        run: |
          npm ci
          npm test

      # Step 4: Authenticate with Docker Hub for image pushing
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      # Step 5: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 6: Build Docker image and push with multiple tags
      # Tags with both 'staging' and the commit SHA for traceability
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            tinluong043/devops-demo:staging
            tinluong043/devops-demo:${{ github.sha }}

  # ----------------------------------------------
  # JOB 2: Deploy to Staging
  # Automatically deploys after successful build
  # ----------------------------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build  # Runs after 'build' is complete
    steps:
      - name: Deploy to Staging EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ${{ secrets.STAGING_EC2_USER }}
          key: ${{ secrets.STAGING_EC2_SSH_KEY }}
          script: |
            echo "--- Deploying to Staging ---"
            # Pull the image tagged with the specific commit SHA
            docker pull tinluong043/devops-demo:${{ github.sha }}

            # Stop and remove the old container
            docker stop staging-app || true
            docker rm staging-app || true

            # Run the new container
            docker run -d --name staging-app -p 80:3000 --restart=always \
              -e APP_VERSION="staging-${{ github.sha }}" \
              -e GIT_SHA="${{ github.sha }}" \
              tinluong043/devops-demo:${{ github.sha }}

            # Clean up old images
            docker image prune -f

  # ----------------------------------------------
  # JOB 3: Deploy to Production
  # Requires manual approval before deployment
  # ----------------------------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging  # Runs after 'deploy-staging' is complete

    # This block enforces the manual approval gate
    environment:
      name: production
      url: http://52.62.52.80

    steps:
      - name: Deploy to Production EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "--- Deploying to Production ---"
            # Pull the exact same image that was on staging
            docker pull tinluong043/devops-demo:${{ github.sha }}

            # Stop and remove the old 'app' container
            docker stop app || true
            docker rm app || true

            # Run the new container
            docker run -d --name app -p 80:3000 --restart=always \
              -e APP_VERSION="prod-${{ github.sha }}" \
              -e GIT_SHA="${{ github.sha }}" \
              tinluong043/devops-demo:${{ github.sha }}

            # Clean up old images
            docker image prune -f